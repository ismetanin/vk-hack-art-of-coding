//
//  ProfileViewController.swift
//  sevcabel
//
//  Created by Ivan Smetanin on 10/11/2018.
//  Copyright ¬© 2018 Ivan Smetanin. All rights reserved.
//

import UIKit
import SwiftyVK

final class ProfileViewController: FeedBlockViewController {

    // MARK: - Properties

    private lazy var transition = DrawerCustomTransitionDelegate()
    private lazy var header: ProfileHeaderView = ProfileHeaderView.fromXib() ?? ProfileHeaderView()

    // MARK: - UIViewController

    override func viewDidLoad() {
        super.viewDidLoad()
        loadUserInfo()
        tableView.setTableHeaderView(header: header)
        header.showSevIdAction = {
            let controller = IdentifierViewController.fromStoryboard()
            controller.modalPresentationStyle = .overFullScreen
            controller.transitioningDelegate = self.transition
            self.present(controller, animated: true, completion: nil)
        }
        didSelectItem = { [weak self] item in
            guard let vc = FeedItemDetailViewController.fromStoryboard() as? FeedItemDetailViewController else {
                return
            }
            vc.configure(with: item)
            self?.present(vc, animated: true, completion: nil)
        }
    }

    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        if tableView.shouldUpdateHeaderViewFrame {
            // This is where table view's content (tableHeaderView, section headers, cells)
            // frames are updated to account for the new table header size.
            self.tableView.beginUpdates()
            self.tableView.endUpdates()
        }
    }

    // MARK: - Private methods

    private func loadUserInfo() {
        DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + 2) {
            VK.API.Users.get([.fields: "photo_200"])
                .onSuccess { [weak self] info in
                    let decoder = JSONDecoder()
                    guard let user = try decoder.decode(Array<User>.self, from: info).first else {
                        return
                    }
                    self?.configure(with: user)
                }
                .onError { error in
                    print(error)
                }
                .send()
        }
    }

    private func configure(with user: User) {
        DispatchQueue.main.async {
            self.header.configure(with: user)
            self.fillTableWithItems()
        }
    }

    private func fillTableWithItems() {
        let items: [FeedItem] = [
            FeedItem(title: "–°–æ–ª—å–Ω—ã–π –∫–æ–Ω—Ü–µ—Ä—Ç –ø–µ–≤–∏—Ü—ã –ù–∏–Ω—ã –ö–∞—Ä–ª—Å—Å–æ–Ω",
                     subtitle: "13 –¥–µ–∫–∞–±—Ä—è",
                     image: UIImage(named: "nina")!,
                     fullImage: UIImage(named: "nina_full")!,
                     description: """
                –ú—É–∑—ã–∫–∞ –ù–∏–Ω—ã –ö–∞—Ä–ª—Å—Å–æ–Ω ‚Äî —É—Ç–æ–Ω—á–µ–Ω–Ω—ã–π –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–∏–Ω—Ç–µ–∑ –±–ª—é–∑–∞, –¥–∂–∞–∑–∞, –∫–∞–±–∞—Ä–µ –∏ —Ä–æ–∫–∞. –°—Ä–µ–¥–∏ –µ—ë –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ ‚Äî —Ñ–æ–ª—å–∫–ª–æ—Ä–Ω—ã–µ –º–æ—Ç–∏–≤—ã –≤ –º—É–∑—ã–∫–µ –∏ –æ—Å—Ç—Ä–æ—É–º–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã —Å ¬´–¥–≤–æ–π–Ω—ã–º –¥–Ω–æ–º¬ª.

                –ó–∞ –≤—Ä–µ–º—è —Å–≤–æ–µ–π –∫–∞—Ä—å–µ—Ä—ã –ù–∏–Ω–∞ –∑–∞–ø–∏—Å—ã–≤–∞–ª–∞ –∞–Ω–≥–ª–æ- –∏ —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–µ –∞–ª—å–±–æ–º—ã –∏ –≤—ã—Å—Ç—É–ø–∞–ª–∞ –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ —Ñ–µ—Å—Ç–∏–≤–∞–ª–µ–π. –í 2017 –≥–æ–¥—É –ø–µ–≤–∏—Ü–∞ –æ—Ç–∫—Ä—ã–≤–∞–ª–∞ –∫–∏–Ω–æ—Ñ–µ—Å—Ç–∏–≤–∞–ª—å ¬´–ö–∏–Ω–æ—Ç–∞–≤—Ä¬ª, –µ–µ –º—É–∑—ã–∫–∞ —Å—Ç–∞–ª–∞ —Å–∞—É–Ω–¥—Ç—Ä–µ–∫–æ–º –¥–ª—è –≤—ã—Å—Ç–∞–≤–∫–∏ –∏ —Ñ–∏–ª—å–º–∞ –ï–≤–≥–µ–Ω–∏—è –ì—Ä–∞–Ω–∏–ª—å—â–∏–∫–æ–≤–∞ ¬´–í –ø—Ä–µ–¥—Ä–∞—Å—Å–≤–µ—Ç–Ω—ã–π —á–∞—Å –Ω–∞—à–∏ —Å–Ω—ã —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è —è—Ä—á–µ¬ª. –°–∞–º–∞ –ù–∏–Ω–∞ —Å—Ç–∞–ª–∞ –≥–ª–∞–≤–Ω–æ–π –≥–µ—Ä–æ–∏–Ω–µ–π —Ñ–∏–ª—å–º–∞.

                –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –Ω–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–µ–π—Å—Ç–≤—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ —Å 50%-–Ω–æ–π —Å–∫–∏–¥–∫–æ–π –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –±–∏–ª–µ—Ç–∞: PORTSEVCABFRIENDPSGX3Q.
                –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –Ω–∞ –ø–µ—Ä–≤—ã–µ 50 –∞–∫—Ç–∏–≤–∞—Ü–∏–πüëá
                """,
                     isEvent: true,
                     isRegistered: true
            ),
            FeedItem(title: "One Love Fest",
                     subtitle: "–°–æ 2 –ø–æ 3 —è–Ω–≤–∞—Ä—è",
                     image: UIImage(named: "one_love")!,
                     fullImage: UIImage(named: "one_love_full")!,
                     description: """
                    2-3 —è–Ω–≤–∞—Ä—è ‚Äî –ø–µ—Ä–≤—ã–π –∑–∏–º–Ω–∏–π –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Ñ–µ—Å—Ç–∏–≤–∞–ª—å One Love Fest –≤ ¬´–ü–æ—Ä—Ç –°–µ–≤–∫–∞–±–µ–ª—å¬ª.

                    –ù–æ–≤—ã–π –ì–æ–¥ 2019 –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è One Love Fest! –ú–∞—Ä–∞—Ñ–æ–Ω –¥–≤—É—Ö–¥–Ω–µ–≤–Ω–æ–≥–æ –≤–µ—Å–µ–ª—å—è —Å –≤–µ—Å–æ–º—ã–º –ª–∞–π–Ω-–∞–ø–æ–º –Ω–∞ –¥–≤—É—Ö —Å—Ü–µ–Ω–∞—Ö, –∑–æ–Ω–∞–º–∏ —Ñ—É–¥–∫–æ—Ä—Ç–∞ –∏ –±–∞—Ä–æ–≤ –æ—Ç –Ω–∏—à–µ–≤—ã—Ö, –ª–∞–º–ø–æ–≤—ã—Ö, –∏ –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ–¥–µ–Ω–∏–π –ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞. –ê —Ç–∞–∫–∂–µ –≤—ã—Å—Ç–∞–≤–∫–∞ —Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤ ¬´–°—Ä–µ–∑¬ª, –∫–æ—Ç–æ—Ä–∞—è –æ–±—ä–µ–¥–∏–Ω–∏—Ç 30 —Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é street art, –º–µ–¥–∏–∞ –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ.

                    ‚Äî 2 —è–Ω–≤–∞—Ä—è: –ù–∏–≥–∞—Ç–∏–≤, Snowgoons, Kurovoi, Dj Row-Man, DJ Tactics, Dj Komar, Dj Shubin, Iggaz, Dj Smirnoff, Pasha Bronx, Alex Osadchi, Boogie Fek, DJ Worm & more TBA.

                    ‚Äî 3 —è–Ω–≤–∞—Ä—è: –õ—É–Ω–∞, Pompeya, –°–ë–ü–ß, –ú–µ–¥–∂–∏–∫—É–ª, Mujuice, Cream Soda, TANTSUI, –°–æ—é–∑, –¢–æ—Å—è –ß–∞–π–∫–∏–Ω–∞, List, Andrei Panin, Feodor Allright, Primat, Juravlove, Saktu, Kimbar, Timofey.

                    One Love Fest ‚Äî –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å, –Ω–∞–¥ –∫–æ—Ç–æ—Ä—ã–º –±—å—é—Ç—Å—è –ª—É—á—à–∏–µ —É–º—ã —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–∞, ¬´—á–µ–º –∑–∞–Ω—è—Ç—å—Å—è –≤ –Ω–æ–≤–æ–≥–æ–¥–Ω–∏–µ –∫–∞–Ω–∏–∫—É–ª—ã?¬ª. üíï
                    """,
                     isEvent: true,
                     isRegistered: true
            )
        ]
        self.configure(with: items)
    }

}
